There are two ways to inherit from parents:

1: inherit command:
$ font-family: inherit;

The element inherits the style from the first parent.

2: Using combinators:

#id h1 {
    font-family: ...
}

Note: 
combinators have higher specificity:

#id h1 {
    font-family: 'Tahoma'
}

h1 {
    font-family: Arial
}

The font-family of Tahoma will be set because combinators create a higher specificity than just the h1. In other words, the rules with more information win over those without.

-----------------------------------------------

All kinds of combinators:

1. white space
We've just seen above.

2. Adjacent sibling (+)

Example:
h2 + p
Assigns to all p tags that directly follow an h2 tag.

<h2></h2>
<p></p>  // this tag
<h2></h2>
<h3></h3>
<p></p>
<h2></h2>
<p></p> // and this tag

rules:
- Elements share the same parent
- The second element comes immediately after the first element.

3. General sibling (~):
Just the same as adjacent sibling, but the second tag doesn't have to be directly in front of the first tag

example:
h2 ~ p

<h2></h2>
<p></p>  // this tag
<h2></h2>
<h3></h3>
<p></p> // and this tag
<h2></h2>
<p></p> // and this tag

rules:
- Elements share the same parent
- The second element comes after the first element.

4. Child (>):
Assigns to the direct child of an element.

<div>
	<h2></h2>
	<p></p> // this tag
	<article>
		<p></p>
	</article>
	<p></p> // and this tag
</div>

rule:
- The second element is a direct child of the first element.


=============================
Box model in CSS:

Every element is interpreted as such a box in CSS: the content, the padding, the border, and the margin.

=============================

Margin Collapsing:

If you have two elements next to each other, then the margins between them are actually collapsed to one margin. The bigger margin wins.


=============================

Shorthand Property:

border: 1px solid black;

margin: 5px (top) 10px (right) 5px (bottom) 10px (left)
margin: 5px (top & bottom) 10px (left & right)
margin: 10px


============================

width and height:

width:
Block level elements take a full available width by default. (width: 100%)

height:
If you want to set the full available height for an element, you need to do it for all the parents that element has. for example, if an h1 element has parents like this:

<html>
   <body>
      <main>
         <section>
            <h1>

you must set height: 100% for all the parents: section, main, body and specially html tag.


==========================

box-sizing:

border-box vs content-box

When we set box-sizing to content-box, all the width and height we've set will be applied to the box's content, and border, padding, and margin will not be included. But when we set it to border-box, the width and height will be applied to the content, but the border, padding, and margin we've set are subtracted from it. For example:

#tag1 {
   width: 100%;
   height: 200px;
   padding: 5px;
   border: 1px solid;
   margin: 10px;
   box-sizing: ...
}

If we set the box-sizing to content-box, the final width and height will be like this:

content height: 200 + 5 + 1 + 10 = 216px

but, when we set it to border-box:

content height: 200 - 5 - 1 - 10 = 184px

We should use the universal selector * to reset all elements to `border-box`. If we use the `body` tag, it won't be applied to children's tags because some browsers set the default display to block, and box-sizing won't be affected.
