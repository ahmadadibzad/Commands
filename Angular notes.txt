# ng version

To install angular cli:
# npm install -g @angular/cli@latest  // @latest is optional

To update cli version:
# npm uninstall -g @angular/cli
# npm install -g @angular/cli@latest

# ng new myApp

# ng serve   // To run the application

# npm install --save primeflex   // A css grid framework

there are two ways to import a css package installed by nodejs:

1. Adding relative path to the styles.scss file:
@import '~primeflex/primeflex.css'  // This means import from node_modules folder

2. Adding absolute path to angular.json file in projects-->[projectname]-->architect-->build-->styles:

# "/node_modules/primeflex/primeflex.css"


====================================
============= Components ===========
====================================

# ng generate component shared/header  // Creates a component in /src/app/shared/header path
Or
# ng g component shared/header


====================================
============= Pipes ================
====================================

# ng generate pipe [name]

We use pipes in HTML with a | character:
{{ dateString | date }}

If you want to use pipes in a directive like ngIf, you have to put the whole of the value into parentheses:
# <div *ngIf="(miles | convert: 'km') > 10">  // If the result of pipe is greater than 10


====================================
=========== Directives =============
====================================

#ng generate directive [name]

---------------------------------
Star * directives:
The * directives change the structure of our HTML (create or remove) like *ngIf, *ngFor ...
We can only use one structural directive in an element. If we use more than one structural directive in an element, Angular will give us an error: "Can't have multiple template bindings on one element. Use only one attribute prefixed with *". To avoid this error, we can use ng-container instead. The ng-container doesn't actually create an HTML element, so we can apply extra structural directives:

#
<ul>
	<ng-container *ngFor="...">
		<li *ngIf="...">	
		</li>
	</ng-container>
</ul>
#

---------------------------------------

To create a custom directive, the best practice is:

#
@Input('myDirective') set backgroundColor(color: string) {
	this.element.nativeElement.style.backgroundColor = color;
}
#

The "backgroundColor" is an optional name for the setter function. We can directly use the name of the directive class instead:

#
@Input() set myDirective(color: string) {
	this.element.nativeElement.style.backgroundColor = color;
}
#

Or


and in HTML:

# <div [myDirective]="'red'">Hello</div>

