# ng version

To install angular cli:
# npm install -g @angular/cli@latest  // @latest is optional

To update cli version:
# npm uninstall -g @angular/cli
# npm install -g @angular/cli@latest

# ng new myApp

We can use --routing flag when we want to include routing inside of the application:

# ng new myApp --routing

To run the application
# ng serve

or we can use npm command which defined in package.json file:

# npm start


====================================
============= Styling ==============
====================================

There are two ways to import a css package installed by nodejs:
# npm install --save primeflex   // A css grid framework

1. Adding relative path to the styles.scss file:
@import '~primeflex/primeflex.css'  // This means import from node_modules folder

2. Adding absolute path to angular.json file in projects-->[projectname]-->architect-->build-->styles:

# "/node_modules/primeflex/primeflex.css"


--------------
When we want to affect the styling of our host element <app-root> in the app.component.css file, the app-root selector will not work because it doesn't exist in the app.component.html file, so Angular can't find it. To solve this problem, we have to use a very special selector called :host:

:host {
  ...
}

--------------
Install tailwind in an Angular project:

Run this command to install the latest version of Tailwind CSS:
# npm i -D tailwindcss@latest

# npx tailwind init

Then, inside of tailwind.config.js, add the following property:

# content: ['./src/**/*.{html,ts}'],

====================================
============= Components ===========
====================================

# ng generate component shared/header  // Creates a component in /src/app/shared/header path
Or
# ng g c shared/header


====================================
============= Pipes ================
====================================

# ng generate pipe [name]

We use pipes in HTML with a | character:
{{ dateString | date }}

If you want to use pipes in a directive like ngIf, you have to put the whole of the value into parentheses:
# <div *ngIf="(miles | convert: 'km') > 10">  // If the result of pipe is greater than 10


====================================
=========== Directives =============
====================================

#ng generate directive [name]

---------------------------------
Star * directives:
The * directives change the structure of our HTML (create or remove) like *ngIf, *ngFor ...
We can only use one structural directive in an element. If we use more than one structural directive in an element, Angular will give us an error: "Can't have multiple template bindings on one element. Use only one attribute prefixed with *". To avoid this error, we can use ng-container instead. The ng-container doesn't actually create an HTML element, so we can apply extra structural directives:

#
<ul>
	<ng-container *ngFor="...">
		<li *ngIf="...">	
		</li>
	</ng-container>
</ul>
#

---------------------------------------

To create a custom directive, the best practice is:

#
@Input('myDirective') set backgroundColor(color: string) {
	this.element.nativeElement.style.backgroundColor = color;
}
#

The "backgroundColor" is an optional name for the setter function. We can directly use the name of the directive class instead:

#
@Input() set myDirective(color: string) {
	this.element.nativeElement.style.backgroundColor = color;
}
#

Or


and in HTML:

# <div [myDirective]="'red'">Hello</div>


====================================
============= Modules ==============
====================================

Angular gets started with the main.ts file. We pass a module as a bootstrapper to it. Inside the module file, we define a root component, and Angular starts the app with it.

Angular uses components to build webpages and uses modules to bundle different pieces into packages basically.

To create a module:
# ng generate module [name]
Or
# ng g m [name]

We can add --routing flag to create a routed module:
# ng generate module [name] --routing

When we want to use a component that is defined in a child module, we need to import the whole child module to the app.module at first. There are two steps to take:
1. export the component we want to use outside in the exports array of the module.
2. Import the entire child module to the `app.module` file.

====================================
============= Classes ==============
====================================

To create a class:
# ng generate class [name]

====================================
============= Routing ==============
====================================

When we want to define a special routing for a component, we don't need to export it in the module file; instead, we can define a route inside the MyComponent-routing.module file:

#
const routes: Routes = [
  {path: 'myPath', component: MyComponent}
];
#

---------------------------------------

Define Home and NotFound routes:

There's no need to define a new module. Just go to the app-routing.module.ts file and add your objects to the routes array like this:

# { path: '', component: HomeComponent },  // for home page
# { path: '**', component: NotFoundComponent },  // for not found page

---------------------------------------

Reordering the routes list:

We can change the order of the routes that are defined everywhere in the project. Just go to the app.module.ts file, in the imports array, and change the order of the modules. It's better to move AppRoutingModule to the end when you have defined a `NotFound` route in it.

---------------------------------------

router-outlet tag:

<router-outlet></router-outlet> tag is used to load the content based on the current route. For example, if the current route is localhost:4200/path1, Angular will replace the router-outlet tag with the content of the component for the path1 route that is defined in module files.

---------------------------------------

routerLink attribute:

Imagine we have a navigation link <a href="link1">Link1</a>. When we click on it, the entire application will be reloaded to load the content of that link. To prevent this, we can use the routerLink attribute instead of the href attribute:

# <a routerLink="link1">Link1</a>

In this way, Angular automatically updates the content. So only the content of that route will be changed, and the application won't be reloaded.

---------------------------------------

Combining array of routes:

We can use the routerLink property to combine an array of routes. Some of them might be virtual routes and not match to any real component:

# <a [routerLink]="['./myComponent', 'foo', 'bar']">Link to somewhere</a>

Result: http://localhost/.../myComponent/foo/bar

---------------------------------------

routerLinkActive

This attribute is used to apply a CSS class when that link is active:

# <a routerLink="/link1" routerLinkActive="myCssClass">Link1</a>


---------------------------------------

routerLinkActiveOptions

If we have child routes and have made one of them the default route, the routerLinkActive property will apply a CSS class whenever we are at every address that contains the parent route. To solve this, we can add one more property called routerLinkActiveOptions:

# [routerLinkActiveOptions]="{ exact: true }"

Example:
#
            <a 
                routerLink="./" 
                routerLinkActive="active" 
                [routerLinkActiveOptions]="{ exact: true }">Child1
	    </a>
#

---------------------------------------

Defining child routes:

If our component has some subcomponents, we can create child navigation in the parent-routing.module file like this:

const routes: Routes = [
  {
    path: 'parent', component: ParentComponent,  // --> http://localhost/parent
    children: [
      { path: './', component: Child1Component },  // --> http://localhost/parent
      { path: './child2', component: Child2Component },  // --> http://localhost/parent/child2  
      { path: './child3', component: Child3Component },  // --> http://localhost/parent/child3
    ]
  }
];


In this example, we didn't define any route for child1, so it will be the default route. We can define a route for that if we want.

Note:
Relative pathes:
"./" This means the current route that we are on.
"./sub-route" This means current-route/sub-route

---------------------------------------

Lazy loading:

All the components in the application use eager loading, which means all the modules are loaded at the start, whether their routes have been visited by the user or not. It takes a lot of time and space. The lazy loading technique is a good way to reduce the size of files at the start. So here are the steps to reach that:

1. Remove the module we want to make a lazy load from the `app.module` file.
2. Define a new route for that module in the `app-routing.module` file with the `loadChildren` property like the following:

#
{
    path: 'modulePath', loadChildren: () => import('./path/myModule.module')
      .then(m => m.MyModule)
}
#

3. Remove or change the path you defined before in the `myModule-routing.module` to prevent having a crazy path.


====================================
============= Services =============
====================================

A service in Angular is a class where you create your HTTP requests and work with APIs.

To create a service:
# ng generate service myService

Notice that we don't have to add the word "service" at the end of the name, because Angular automatically adds it at the end.
Angular automatically creates an instance of services to use in components, so we don't need to create instances and write codes like new MyService(). See dependency injection section.


================================================
============= Dependency Injection =============
================================================

Components, services, and some other things in Angular ask for dependencies, rather than creating them directly. Components could create an instance of those things themselves. Instead, we can pass them in to the constructor, and Angular will create a new instance of those automatically:

#
constructor(private instance1: AnInjectableClass, private instance2: AnotherInjectableClass) {

}
#

The order of dependencies doesn't matter. If you change the order of dependencies, Angular will handle it automatically.

To make a class injectable, we must add the @Injectable decorator at the top of the class:
@Injectable
export class MyClass {

}

Dependency injection makes testing easier.

=======================================
============= XSS Attacks =============
=======================================

XSS attacks and escaping HTML:
We can use the [innerHTML] property on tags to prevent any XSS attack. If we have some HTML strings and want to append them to our HTML tags, we have to use this property rather than using {{ }}.

For example, if we have an html string like this:
# let myHtmlString = `<img src=javascript:alert('XSS')>`;

And want to show it in the view:

# <div [innerHTML]="myHtmlString"></div>

Angular automatically scapes HTML:  

# <div><img src="unsafe:javascript:alert('XSS')"></div>

=======================================
=========== Reactive Forms ============
=======================================

Reactive Forms:

We can use `FormGroup` and `FormClass` to define some form fields in the component class:

#
cardForm = new FormGroup({
    myField: new FormControl('', [
      Validators.required,
      Validators.minLength(3),
      Validators.maxLength(5)
    ])
  })
#

And we use `formControlName` property to bind an HTML field to our variable in the class:

# <input type="text" class="input" formControlName="myField">
