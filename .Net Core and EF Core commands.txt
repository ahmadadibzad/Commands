To see information about .Net version installed:
$ dotnet --info

To run a project:
$ dotnet run

$ dotnet watch

$ dotnet watch --no-hot-reload  // Does not use hot reload, but if we do make a change, it's going to automatically restart our app.

To create a new solution:
$ dotnet new sln

To create a new WebAPI project:
$ dotnet new webapi -n <name>

To create a new class library project:
$ dotnet new classlib -n <name>

We can use -o configuration to output the project to a specific path:
$ dotnet new webapi -o [path]

To add a project to the solution:
$ cd <Solution path>
$ dotnet sln add <Path to csproj file of a project>

To add a project reference to the project:
$ cd <Project path>
$ dotnet add reference <Path to csproj file of another project>

To add a project reference from current project:
$ dotnet remove reference <path to csproj file of another project>

To restore all the dependencies of the sln
$ dotnet restore

To see the list of all the projects in a solution:
$ dotnet sln list

============================================
EF Core:

Migration:

To create a new migration:
$ Add-Migration <name>

To remove the latest migration:
$ Remove-Migration

To affecting the latest migration to the database:
$ Update-Database

To rollback to a migration:
$ Update-Database -Migration <migration name>

To rollback all migrations:
$ Update-Database 0

-----------------------
Using dotnet tool:

To install dotnet tool:
$ dotnet tool install --global dotnet-ef

To update existing dotnet tool:
$ dotnet tool update --global dotnet-ef

To create a migration:
$ dotnet ef migrations add [name]
$ dotnet ef migrations add [name] -p [project]
$ dotnet ef migrations add [migration name] -s [startup project name] -p [the project name that contains DbContext]

To remove the last migration:
$ dotnet ef migrations remove -s [startup project name] -p [the project name that contains DbContext]

To update database:
$ dotnet ef database update

To drop existing database:
$ dotnet ef database drop
